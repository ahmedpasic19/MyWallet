// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  walletAccounts        WalletAccounts[]
  goals                 Goal[]
  categories            Category[]
  records               Record[]
  transfers             Transfer[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model WalletAccounts {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  note          String?
  initialAmount Float?

  user          User       @relation(fields: [userId], references: [id])
  userId        String     @db.ObjectId
  Record        Record[]
  TransfersFrom Transfer[] @relation(name: "AccountFrom")
  TransfersTo   Transfer[] @relation(name: "AccountTo")

  createdAt DateTime @default(now())
}

enum RecordType {
  EXPENSE
  INCOME
}

model Record {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  amount Float
  date   DateTime
  note   String?

  type RecordType

  account    WalletAccounts @relation(fields: [accountId], references: [id])
  accountId  String         @db.ObjectId
  category   Category?      @relation(fields: [categoryId], references: [id])
  categoryId String?        @db.ObjectId
  goal       Goal?          @relation(fields: [goalId], references: [id])
  goalId     String?        @db.ObjectId
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  amount Float
  date   DateTime
  note   String?

  accountFrom   WalletAccounts @relation(name: "AccountFrom", fields: [accountFromId], references: [id])
  accountFromId String         @db.ObjectId
  accountTo     WalletAccounts @relation(name: "AccountTo", fields: [accountToId], references: [id])
  accountToId   String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.ObjectId
  goal          Goal?          @relation(fields: [goalId], references: [id])
  goalId        String?        @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name          String
  note          String?
  target        Float
  initialAmount Float?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime   @default(now())
  Record    Record[]
  Transfer  Transfer[]
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  note   String?
  budget Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  Record    Record[]
}
