generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  // WalletAccounts WalletAccounts[]
  // Goal          Goal[]
  // Category      Category[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model WalletAccounts {
  id String @id @default(cuid())

  name          String
  note          String?
  initialAmount Float?

  // user          User       @relation(fields: [userId], references: [id])
  // userId        String
  Record        Record[]
  TransfersFrom Transfer[] @relation(name: "AccountFrom")
  TransfersTo   Transfer[] @relation(name: "AccountTo")

  createdAt DateTime @default(now())
}

enum RecordType {
  EXPENSE
  INCOME
}

model Record {
  id     String   @id @default(cuid())
  title  String
  amount Float
  date   DateTime
  note   String?

  type RecordType

  account    WalletAccounts @relation(fields: [accountId], references: [id])
  accountId  String
  category   Category?      @relation(fields: [categoryId], references: [id])
  categoryId String?
  goal       Goal?          @relation(fields: [goalId], references: [id])
  goalId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id     String   @id @default(cuid())
  title  String
  amount Float
  date   DateTime
  note   String

  accountFrom   WalletAccounts @relation(name: "AccountFrom", fields: [accountFromId], references: [id])
  accountFromId String
  accountTo     WalletAccounts @relation(name: "AccountTo", fields: [accountToId], references: [id])
  accountToId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id String @id @default(cuid())

  name          String
  note          String?
  target        Float
  initialAmount Float?

  // user   User   @relation(fields: [userId], references: [id])
  // userId String

  createdAt DateTime @default(now())
  Record    Record[]
}

model Category {
  id     String  @id @default(cuid())
  name   String
  note   String?
  budget Float

  // user   User   @relation(fields: [userId], references: [id])
  // userId String

  createdAt DateTime @default(now())
  Record    Record[]
}
