// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model WalletAccounts {
  id String @id @default(cuid())

  name          String
  note          String?
  initialAmount Float?

  // user          User       @relation(fields: [userId], references: [id])
  // userId        String
  Record        Record[]
  TransfersFrom Transfer[] @relation(name: "AccountFrom")
  TransfersTo   Transfer[] @relation(name: "AccountTo")

  createdAt DateTime @default(now())
}

enum RecordType {
  EXPENSE
  INCOME
}

model Record {
  id     String   @id @default(cuid())
  title  String
  amount Float
  date   DateTime
  note   String?

  type RecordType

  account    WalletAccounts @relation(fields: [accountId], references: [id])
  accountId  String
  category   Category?      @relation(fields: [categoryId], references: [id])
  categoryId String?
  goal       Goal?          @relation(fields: [goalId], references: [id])
  goalId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id     String   @id @default(cuid())
  title  String
  amount Float
  date   DateTime
  note   String?

  accountFrom   WalletAccounts @relation(name: "AccountFrom", fields: [accountFromId], references: [id])
  accountFromId String
  accountTo     WalletAccounts @relation(name: "AccountTo", fields: [accountToId], references: [id])
  accountToId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id String @id @default(cuid())

  name          String
  note          String?
  target        Float
  initialAmount Float?

  // user   User   @relation(fields: [userId], references: [id])
  // userId String

  createdAt DateTime @default(now())
  Record    Record[]
}

model Category {
  id     String  @id @default(cuid())
  name   String
  note   String?
  budget Float

  // user   User   @relation(fields: [userId], references: [id])
  // userId String

  createdAt DateTime @default(now())
  Record    Record[]
}
